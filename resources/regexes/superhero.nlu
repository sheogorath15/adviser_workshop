# general rules

rule hello(): "(\\b|^|\\ )(hi|hello|howdy|hey)\\b"
rule bye(): "(\\b|^|\\ )(bye(-)?(bye)?|good(-)?bye|that'?s?\\ (is\\ )*all)(\\s|$|\\ |\\.)"
rule deny(): "((\\b|^|\\ )(n(o)?|wrong|incorrect|error|nope)|(not\\ (true|correct|right)))(\\s)?$"
rule affirm(): "((yes|yeah|(\\b|^)ok\\b|(\\b|^)OK|okay|sure|^y$|(\\b|^)yep(\\b|$)|(that('?s| is) )?(?<!not\\ )(?<!no\\ )(right|correct|confirm)))(\\s)?$"
rule thanks(): "(?=.*(^(\\ )*)(((great|good|awesome|nice|cool)\\ )?((that((')?s|\\ (is|was))\\ (very\\ )?helpful)\\ )?(thank|thank(s|\\ you)(\\ (very|so)\\ much)?)(\\ (that((')?s|\\ (is|was))\\ (very\\ )?helpful))?|((great|good|awesome|nice|cool)\\ )?(that((')?s|\\ (is|was))\\ (very\\ )?helpful)|(great|good|awesome|nice|cool))((\\ )*))(?=^(?:(?!bye).)*$).*$"
rule repeat(): "(\\b|^|\\ )(repeat((\\ that )|(\\ it))?)|(say((\\ that )|(\\ it))\\ again)|(again)"
rule reqalts(): "(\\b|^|\\ )((something|anything)\\ else)|(different(\\ one)*)|(another\\ one)|(alternatives*)|(other options*)|((don'*t|do not) (want|like)\\ (that|this)(\\ one)*)"
rule ack(): "{IMPOSSIBLEREGEX()}"
rule bad(): "{IMPOSSIBLEREGEX()}"

# user informable slots are name, department and position

rule inform(name)
    "{rINFORM()} {synonyms("name", name)}"
    "{synonyms("name", name)}{WBG()}"
    "(\\ |^){synonyms("name", name)}(\\ (please|and))*"

rule inform(primary_uniform_color)
    # "\\\\b{primary_uniform_color}\\\\b"
    "{rINFORM()} {synonyms("primary_uniform_color", primary_uniform_color)}"
    "{synonyms("primary_uniform_color", primary_uniform_color)}{WBG()}"
    "(\\ |^){synonyms("primary_uniform_color", primary_uniform_color)}(\\ (please|and))*"

rule inform(main_superpower)
    # "\\\\b{main_superpower}\\\\b"
    "{rINFORM()} {synonyms("main_superpower", main_superpower)}"
    "{synonyms("main_superpower", main_superpower)}{WBG()}"
    "(\\ |^){synonyms("main_superpower", main_superpower)}(\\ (please|and))*"

rule inform(loyalty)
    # "\\\\b{loyalty}\\\\b"
    "{rINFORM()} {synonyms("loyalty", loyalty)}"
    "{synonyms("loyalty", loyalty)}{WBG()}"
    "(\\ |^){synonyms("loyalty", loyalty)}(\\ (please|and))*"    

# All slots are requestable


rule request(primary_uniform_color)
    "{rREQUEST()} {slot_synonyms("primary_uniform_color")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("primary_uniform_color")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("primary_uniform_color")}"
    "{WANT()}.*{slot_synonyms("primary_uniform_color")}"
    "(the )?{slot_synonyms("primary_uniform_color")}"

rule request(main_superpower)
    "{rREQUEST()} {slot_synonyms("main_superpower")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("main_superpower")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("main_superpower")}"
    "{WANT()}.*{slot_synonyms("main_superpower")}"
    "(the )?{slot_synonyms("main_superpower")}"
    "what .*{slot_synonyms("main_superpower")}"

rule request(name)
    "{rREQUEST()} {slot_synonyms("name")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("name")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("name")}"
    "{WANT()}.*{slot_synonyms("name")}"
    "(the )?{slot_synonyms("name")}"
    "who .*{slot_synonyms("name")}"

rule request(last_known_location)
    "{rREQUEST()} {slot_synonyms("last_known_location")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("last_known_location")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("last_known_location")}"
    "{WANT()}.*{slot_synonyms("last_known_location")}"
    "(the )?{slot_synonyms("last_known_location")}"
    "when( .*|$)|at what time {slot_synonyms("last_known_location")}"

rule request(loyalty)
    "{rREQUEST()} {slot_synonyms("loyalty")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("loyalty")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("loyalty")}"
    "{WANT()}.*{slot_synonyms("loyalty")}"
    "(the )?{slot_synonyms("loyalty")}"
    "what .*{slot_synonyms("loyalty")}"

rule request(description)
    "{rREQUEST()} {slot_synonyms("description")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("description")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("description")}"
    "{WANT()}.*{slot_synonyms("description")}"
    "(the )?{slot_synonyms("description")}"

rule request(real_name)
    "{rREQUEST()} {slot_synonyms("real_name")}"
    "(?<!{DONTCAREWHAT()})(?<!want ){IT()} {slot_synonyms("real_name")}"
    "(?<!{DONTCARE()}){WHAT()} {slot_synonyms("real_name")}"
    "{WANT()}.*{slot_synonyms("real_name")}"
    "(the )?{slot_synonyms("real_name")}"
    "where( is .*|$){slot_synonyms("real_name")}"


# synonyms

function synonyms(slot, value)
    "{value}"
  
    #add_if slot = "name"

    #add_if slot = "last_known_location"

    #add_if slot = "description"

    #add_if slot = "real_name"

    add_if slot = "main_superpower"
        if value = "strength"
            "super strength"
        if value = "martial arts"
            "fighting"
    
    add_if slot = "loyalty"
        if value = "he works best alone"
            "alone"
            "himself"


function slot_synonyms(slot)
    "{IMPOSSIBLEREGEX()}"

    if slot = "name"
        "name"
        "{domain_vocab()}('s)? name"
        "name of the {domain_vocab()}"
    if slot = "primary_uniform_color"
        "colo(u)?r(s)?"
        "(primary|main|uniform) colo(u)?r(s)?"
    if slot = "main_superpower"
        "(main|primary)? skill(s)?"
        "(main|primary)? power(s)?"
        "(main|primary)? talent(s)?"
    if slot = "last_known_location"
        "location"
        "address"
        "last (known)? location"
        "last (known)? address"
    if slot = "loyalty"
        "loyalty"
        "team"
    if slot = "description"
        "description"
    if slot = "real_name"
        "secret identity"
        "real name"
        "alias(es)?"


# constants

function domain_vocab(): "(hero|supehero|super\\ hero)"
function IMPOSSIBLEREGEX(): "^\b$"
function WHAT(): "(what(\\')?(s)?|which|does|where)(\\ (its|the))*"
function IT(): "(it\\'*s*|it\\ have|is\\ it\\'*s*|is\\ (the|their))(\\ for)*"
function CYTM(): "(can\\ you\\ tell\\ me\\ (the|it\\'*s|their))"
function CIG(): "(can\\ I\\ get\\ (the|it\\'*s|their))"
function NEGATE(): "((i\\ )*(don\\'?t|do\\ not|does\\ not|does\\'?nt)\\ (care|mind|matter)(\\ (about|what))*(\\ (the|it\\'?s*))*)"
# Cant create variable lengths with negative lookback... else merge following:
function DONTCARE(): "(i\\ dont\\ care)"
function DONTCAREWHAT(): "(i\\ dont\\ care\\ what\\ )"
function DONTCAREABOUT(): "(i\\ dont\\ care\\ about\\ )"
function rREQUEST(): "(\\\\b|^|\\ )(?<!{DONTCARE()})({WHAT()}\\ {IT()}|{CYTM()}|{CIG()})"
function WANT(): "(what\\ about|want|have|need|looking\\ for|used\\ for)(\\ a(n)?)*"
function WBG(): "(\\ ((would|seems\\ to)\\ be\\ (good|nice)($|[^\\?]$)|seems\\ (good|nice)($|[^\\?]$)))"
function rINFORM(): "(\\\\b|^|\\ ){WANT()}"
function rINFORM_DONTCARE(): "{DONTCARE()} ((what|which|about)(\\ (it\\'*s*|the))*)+"
function rINFORM_DONTWANT(): "(((i\\ )*(don\\'*t\\ want))|it\\ (shouldn\\'*t|should\\ not)\\ (have|be))+"
# Contextual dontcares: i.e things that should be labelled inform(=dontcare)
function rCONTEXTUAL_DONTCARE(): "(anything(?!\\ else)|((any$|any\\ kind)|(i\\ )*(don\\'?t|do\\ not)\\ (care|know))($|(?!\\ (a?bout|of|what))|(\\ (a?bout|of|what)\\ (type|kind)(?!\\ of))|\\ a?bout\\ (that|this))|(any(thing)?\\ (is\\ )*(fine|ok\\\\b|okay|will\\ do))($|\\ and|\\ but)|(it )?(doesn\\'?t|does not) matter)+"
